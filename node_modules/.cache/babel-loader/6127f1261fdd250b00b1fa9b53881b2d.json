{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom';import'./index.css';import App from'./App';import reportWebVitals from'./reportWebVitals';import{jsx as _jsx}from\"react/jsx-runtime\";ReactDOM.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}),document.getElementById('root'));var io=require(\"socket.io\")(8900,{cors:{origin:\"http://localhost:3000\"}});var users=[];var addUser=function addUser(userId,socketId){!users.some(function(user){return user.userId===userId;})&&users.push({userId:userId,socketId:socketId});};var removeUser=function removeUser(socketId){users=users.filter(function(user){return user.socketId!==socketId;});};var getUser=function getUser(userId){return users.find(function(user){return user.userId===userId;});};io.on(\"connection\",function(socket){//when ceonnect\nconsole.log(\"a user connected.\");//take userId and socketId from user\nsocket.on(\"addUser\",function(userId){addUser(userId,socket.id);io.emit(\"getUsers\",users);});//send and get message\nsocket.on(\"sendMessage\",function(_ref){var senderId=_ref.senderId,receiverId=_ref.receiverId,text=_ref.text;var user=getUser(receiverId);io.to(user.socketId).emit(\"getMessage\",{senderId:senderId,text:text});});//when disconnect\nsocket.on(\"disconnect\",function(){console.log(\"a user disconnected!\");removeUser(socket.id);io.emit(\"getUsers\",users);});});// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"sources":["/Users/student/Desktop/Real-Time-Chat/real-time-chat/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","render","document","getElementById","io","require","cors","origin","users","addUser","userId","socketId","some","user","push","removeUser","filter","getUser","find","on","socket","console","log","id","emit","senderId","receiverId","text","to"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,C,2CAEAF,QAAQ,CAACG,MAAT,cACE,KAAC,KAAD,CAAO,UAAP,wBACE,KAAC,GAAD,IADF,EADF,CAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,EAMA,GAAMC,CAAAA,EAAE,CAAGC,OAAO,CAAC,WAAD,CAAP,CAAqB,IAArB,CAA2B,CACpCC,IAAI,CAAE,CACJC,MAAM,CAAE,uBADJ,CAD8B,CAA3B,CAAX,CAKA,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,MAAD,CAASC,QAAT,CAAsB,CACpC,CAACH,KAAK,CAACI,IAAN,CAAW,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACH,MAAL,GAAgBA,MAA1B,EAAX,CAAD,EACEF,KAAK,CAACM,IAAN,CAAW,CAAEJ,MAAM,CAANA,MAAF,CAAUC,QAAQ,CAARA,QAAV,CAAX,CADF,CAED,CAHD,CAKA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACJ,QAAD,CAAc,CAC/BH,KAAK,CAAGA,KAAK,CAACQ,MAAN,CAAa,SAACH,IAAD,QAAUA,CAAAA,IAAI,CAACF,QAAL,GAAkBA,QAA5B,EAAb,CAAR,CACD,CAFD,CAIA,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACP,MAAD,CAAY,CAC1B,MAAOF,CAAAA,KAAK,CAACU,IAAN,CAAW,SAACL,IAAD,QAAUA,CAAAA,IAAI,CAACH,MAAL,GAAgBA,MAA1B,EAAX,CAAP,CACD,CAFD,CAIAN,EAAE,CAACe,EAAH,CAAM,YAAN,CAAoB,SAACC,MAAD,CAAY,CAC9B;AACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAEA;AACAF,MAAM,CAACD,EAAP,CAAU,SAAV,CAAqB,SAACT,MAAD,CAAY,CAC/BD,OAAO,CAACC,MAAD,CAASU,MAAM,CAACG,EAAhB,CAAP,CACAnB,EAAE,CAACoB,IAAH,CAAQ,UAAR,CAAoBhB,KAApB,EACD,CAHD,EAKA;AACAY,MAAM,CAACD,EAAP,CAAU,aAAV,CAAyB,cAAoC,IAAjCM,CAAAA,QAAiC,MAAjCA,QAAiC,CAAvBC,UAAuB,MAAvBA,UAAuB,CAAXC,IAAW,MAAXA,IAAW,CAC3D,GAAMd,CAAAA,IAAI,CAAGI,OAAO,CAACS,UAAD,CAApB,CACAtB,EAAE,CAACwB,EAAH,CAAMf,IAAI,CAACF,QAAX,EAAqBa,IAArB,CAA0B,YAA1B,CAAwC,CACtCC,QAAQ,CAARA,QADsC,CAEtCE,IAAI,CAAJA,IAFsC,CAAxC,EAID,CAND,EAQA;AACAP,MAAM,CAACD,EAAP,CAAU,YAAV,CAAwB,UAAM,CAC5BE,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACAP,UAAU,CAACK,MAAM,CAACG,EAAR,CAAV,CACAnB,EAAE,CAACoB,IAAH,CAAQ,UAAR,CAAoBhB,KAApB,EACD,CAJD,EAKD,CAzBD,EA2BA;AACA;AACA;AACAR,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nconst io = require(\"socket.io\")(8900, {\n  cors: {\n    origin: \"http://localhost:3000\",\n  },\n});\nlet users = [];\n\nconst addUser = (userId, socketId) => {\n  !users.some((user) => user.userId === userId) &&\n    users.push({ userId, socketId });\n};\n\nconst removeUser = (socketId) => {\n  users = users.filter((user) => user.socketId !== socketId);\n};\n\nconst getUser = (userId) => {\n  return users.find((user) => user.userId === userId);\n};\n\nio.on(\"connection\", (socket) => {\n  //when ceonnect\n  console.log(\"a user connected.\");\n\n  //take userId and socketId from user\n  socket.on(\"addUser\", (userId) => {\n    addUser(userId, socket.id);\n    io.emit(\"getUsers\", users);\n  });\n\n  //send and get message\n  socket.on(\"sendMessage\", ({ senderId, receiverId, text }) => {\n    const user = getUser(receiverId);\n    io.to(user.socketId).emit(\"getMessage\", {\n      senderId,\n      text,\n    });\n  });\n\n  //when disconnect\n  socket.on(\"disconnect\", () => {\n    console.log(\"a user disconnected!\");\n    removeUser(socket.id);\n    io.emit(\"getUsers\", users);\n  });\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}