[{"/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/index.js":"1","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/App.js":"2","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/reportWebVitals.js":"3","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/chat-component/index.js":"4","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/Home/index.js":"5","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/PageHome/index.js":"6","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/ChatSearch/index.js":"7"},{"size":1643,"mtime":1638817246784,"results":"8","hashOfConfig":"9"},{"size":1555,"mtime":1638816680208,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1638816680217,"results":"11","hashOfConfig":"9"},{"size":3198,"mtime":1638816680217,"results":"12","hashOfConfig":"9"},{"size":577,"mtime":1638816680216,"results":"13","hashOfConfig":"9"},{"size":689,"mtime":1638816680216,"results":"14","hashOfConfig":"9"},{"size":713,"mtime":1638816680215,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"15n22p5",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/index.js",["33","34","35"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// const io = require(\"socket.io\")(8900, {\n//   cors: {\n//     origin: \"http://localhost:3000\",\n//   },\n// });\nlet users = [];\n\nconst addUser = (userId, socketId) => {\n  !users.some((user) => user.userId === userId) &&\n    users.push({ userId, socketId });\n};\n\nconst removeUser = (socketId) => {\n  users = users.filter((user) => user.socketId !== socketId);\n};\n\nconst getUser = (userId) => {\n  return users.find((user) => user.userId === userId);\n};\n\n// io.on(\"connection\", (socket) => {\n//   //when ceonnect\n//   console.log(\"a user connected.\");\n//\n//   //take userId and socketId from user\n//   socket.on(\"addUser\", (userId) => {\n//     addUser(userId, socket.id);\n//     io.emit(\"getUsers\", users);\n//   });\n//\n//   //send and get message\n//   socket.on(\"sendMessage\", ({ senderId, receiverId, text }) => {\n//     const user = getUser(receiverId);\n//     io.to(user.socketId).emit(\"getMessage\", {\n//       senderId,\n//       text,\n//     });\n//   });\n//\n//   //when disconnect\n//   socket.on(\"disconnect\", () => {\n//     console.log(\"a user disconnected!\");\n//     removeUser(socket.id);\n//     io.emit(\"getUsers\", users);\n//   });\n// });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/App.js",[],["36","37"],"/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/reportWebVitals.js",[],"/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/chat-component/index.js",["38","39"],"import { useEffect, useState } from 'react';\nimport './style.css';\n\nimport io from 'socket.io-client';\nimport { render } from '@testing-library/react';\n\nvar date = new Date();\nvar s = (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n\nconst ChatComponent = (props) => {\n    const [messages, setMessages] = useState([]);\n    const [chatMsg, setChatMsg] = useState('');\n    const [userName, setUserName] = useState('');\n    const [showUser, setShowUser] = useState('');\n    const [socket, setSocket] = useState(null);\n\n    useEffect(() => {\n        const newSocket = io(`http://localhost:8080/`);\n        setSocket(newSocket);\n\n        newSocket.on( 'message_sent', (data) => {\n            console.log('received message', data);\n            \n            messages.push(data);\n            setMessages([...messages]);\n        });\n\n        return () => newSocket.close();\n    }, [setSocket, messages]);\n\n    return (\n        <div className='chat-container'>\n            <div className='chat-header'>\n                <h2>{`${props.chatname}`}</h2>\n            </div>\n\n            <div className='chat-messages-container'>\n                {\n                    (messages.length === 0) && <p style={{width: '100%', textAlign: 'center'}}>No Messages to be Read :(</p>\n                }\n\n                {\n                    messages.map((message: string, name: string, index: number) => {\n                        return(\n                            <ChatMessageComponent key={message.msg + message.name + index} name={message.name} message={message.msg} time={message.time}></ChatMessageComponent>\n                        );\n                    })\n                }\n\n                <div className='line-with-text-container'>\n                    <p className='line-with-text'><span>{s}</span></p>\n                </div>\n            </div>\n\n            <form className='input-container' onSubmit={(e) => {\n                e.preventDefault();\n                setShowUser(true);\n\n                const data = {\n                    name: userName,\n                    msg: chatMsg,\n                    time: new Date()\n                };\n\n                setChatMsg('');\n\n                socket.emit('message_sent', data);\n                }}>\n\n                { \n                    (!showUser) &&\n                    <input placeholder={'Type your username...'} value={userName} onChange={e => {\n                        setUserName(e.target.value); setChatMsg('has joined the server')}}></input>\n                }\n\n                {\n                    (showUser) && (userName != ' ') &&\n                        <input placeholder={'Type a new message...'} value={chatMsg} onChange={(e)=>{\n                            setChatMsg(e.target.value);\n                    }}></input>\n                }\n                <button><strong>{'>>'}</strong></button>\n            </form>\n        </div>\n    );\n}\n\nconst ChatMessageComponent = (props) => {\n    return (\n        <div className='chat-message-container'>\n            <p style={{flexGrow:1}}><strong>{`${props.name} | ${props.message}`}</strong></p>\n            <p>{`${props.time}`}</p>\n        </div>\n    );\n}\n\nexport default ChatComponent;","/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/Home/index.js",[],"/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/PageHome/index.js",[],"/Users/deepakramalingam/Documents/Projects/Real-Time-Chat/src/components/ChatSearch/index.js",[],{"ruleId":"40","severity":1,"message":"41","line":20,"column":7,"nodeType":"42","messageId":"43","endLine":20,"endColumn":14},{"ruleId":"40","severity":1,"message":"44","line":25,"column":7,"nodeType":"42","messageId":"43","endLine":25,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":29,"column":7,"nodeType":"42","messageId":"43","endLine":29,"endColumn":14},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"40","severity":1,"message":"50","line":5,"column":10,"nodeType":"42","messageId":"43","endLine":5,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":77,"column":45,"nodeType":"53","messageId":"54","endLine":77,"endColumn":47},"no-unused-vars","'addUser' is assigned a value but never used.","Identifier","unusedVar","'removeUser' is assigned a value but never used.","'getUser' is assigned a value but never used.","no-native-reassign",["55"],"no-negated-in-lhs",["56"],"'render' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]